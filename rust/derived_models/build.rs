use std::path::Path;
use typify::{TypeSpace, TypeSpaceSettings};

fn main() {
    println!("cargo:rerun-if-changed=../json-schema/config.schema.json");
    println!("cargo:rerun-if-changed=../json-schema/driver.schema.json");
    println!("cargo:rerun-if-changed=../json-schema/data.schema.json");

    generate_types_from_schema(
        "../json-schema/config.schema.json",
        "src/config.rs",
        "Config types from config.schema.json",
    );

    generate_types_from_schema(
        "../json-schema/driver.schema.json",
        "src/driver.rs",
        "Driver types from driver.schema.json",
    );

    generate_types_from_schema(
        "../json-schema/data.schema.json",
        "src/data.rs",
        "Data types from data.schema.json",
    );
}

fn generate_types_from_schema(schema_path: &str, output_path: &str, description: &str) {
    let schema_file = Path::new(schema_path);
    let output_file = Path::new(output_path);

    // Read and parse the JSON schema
    let schema_content = std::fs::read_to_string(schema_file)
        .unwrap_or_else(|e| panic!("Failed to read schema file {}: {}", schema_path, e));

    let schema: schemars::schema::RootSchema = serde_json::from_str(&schema_content)
        .unwrap_or_else(|e| panic!("Failed to parse schema file {}: {}", schema_path, e));

    // Generate Rust types
    let mut settings = TypeSpaceSettings::default();
    settings.with_derive("Clone".to_string());
    settings.with_derive("PartialEq".to_string());
    let mut type_space = TypeSpace::new(&settings);
    type_space
        .add_root_schema(schema)
        .unwrap_or_else(|e| panic!("Failed to process schema {}: {}", schema_path, e));

    // Write generated code
    let contents = format!(
        "// {}\n// This file is automatically generated by build.rs\n// DO NOT EDIT MANUALLY\n\n{}\n",
        description,
        prettyplease::unparse(&syn::parse2(type_space.to_stream()).unwrap())
    );

    std::fs::write(output_file, contents)
        .unwrap_or_else(|e| panic!("Failed to write output file {}: {}", output_path, e));
}
