name: ammp-edge
version: git
summary: Edge application for AMMP
description: |
    Manages data collection and forwarding for AMMP, the Asset Monitoring and Management Platform.
    https://www.ammp.io/
    https://github.com/ammpio/ammp-edge

grade: stable
confinement: strict

base: core24

platforms:
  armhf:
  arm64:

compression: lzo

epoch: 1

apps:
  # Oneshot services don't support restart-on-failure
  # (see https://forum.snapcraft.io/t/restart-condition-not-respected-for-oneshot-systemd-service/)
  # So this needs to be provided for in the application itself
  ae-init:
    command: bin/ae init
    daemon: oneshot
    plugs: [network]
  ae-wait-for-time-source:
    command: bin/ae wait-for-time-source
    daemon: oneshot
  mosquitto:
    command: bin/mosquitto_svc.sh
    daemon: simple
    restart-condition: always
    restart-delay: 2s
    after: [ae-init]
    plugs: [network, network-bind]
  ae-pub-meta:
    command: bin/ae mqtt-pub-meta
    daemon: oneshot
    after: [ae-init, mosquitto]
    plugs: [network]
  ae-sub-cfg-cmd:
    command: bin/ae mqtt-sub-cfg-cmd
    daemon: simple
    restart-condition: always
    restart-delay: 2s
    after: [ae-init, mosquitto]
    plugs: [network, network-bind, serial-port]
    environment:
    # The following is required in order to make libblas3 visible to nmap
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas"
  ammp-edge:
    command: bin/ammp_edge
    daemon: simple
    restart-condition: always
    restart-delay: 2s
    after: [ae-init, ae-wait-for-time-source, mosquitto]
    plugs:
      - network
      - network-bind
      - system-observe
      - hardware-observe
      - network-observe
      - serial-port
      - log-observe
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas"
  web-ui:
    command: bin/python3 -m flask run
    daemon: simple
    restart-condition: always
    after: [ae-init]
    plugs:
      - network-bind
    environment:
      FLASK_APP: web_ui
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8000
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas"
  nmap:
    command: usr/bin/nmap
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas"
    plugs: [network, network-bind, network-control]
  wifi-ap-control:
    command: bin/wifi_ap_control
    daemon: simple
    restart-condition: on-abnormal
    plugs: [network]
  env-scan:
    command: bin/env_scan_svc
    daemon: simple
    plugs: [network, network-observe]
    timer: 0:00~24:00/36
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/blas"
  read-sma-hycon-csv:
    command: bin/ae read-sma-hycon-csv
    daemon: oneshot
    timer: 00:30~04:00
    after: [ae-init, ae-wait-for-time-source, mosquitto]
    plugs: [network]

parts:
  ammp-edge:
    plugin: python
    source: src
    build-packages:
      - libsnmp-dev
    build-environment:
      - PIP_EXTRA_INDEX_URL: https://ammplipy.ammp.io/
    stage-packages:
      - libsnmp40t64
      - nmap
    override-prime: |
      craftctl default
      "${CRAFT_PRIME}"/bin/python3 \
        -m compileall \
        -q \
        --workers 0 \
        "${CRAFT_PRIME}"
  configs:
    plugin: dump
    source: config
    prime:
      - mosquitto.conf.tpl
      - mqtt-bridge.conf.tpl
      - mqtt-bridge-stage.conf.tpl
  resources:
    plugin: dump
    source: resources
    organize:
      '*': resources/
    prime: [resources]
  drivers:
    plugin: dump
    source: drivers
    organize:
      '*': drivers/
    prime: [drivers]
  bin:
    plugin: dump
    source: bin
    organize:
      '*': bin/
    prime:
     - bin
  ae:
    plugin: rust
    source: rust
    build-packages:
      - pkg-config
      - libsqlite3-dev
  envsubst:
    plugin: nil
    stage-packages:
     - gettext-base
    prime:
     - usr/bin/envsubst
  mosquitto:
    plugin: make
    make-parameters:
     - "prefix=/usr"
     - "WITH_DOCS=no"
     - "WITH_CJSON=no"
     - "WITH_ADNS=yes"
     - "CFLAGS='-Wall -ggdb -O2 -I$CRAFT_STAGE/include -D_GNU_SOURCE'"
    source: https://github.com/eclipse/mosquitto
    source-type: git
    source-tag: v2.0.20
    source-depth: 1
    build-packages:
      - libssl-dev
      - gcc
      - g++
    prime:
      - usr/sbin/mosquitto
      - usr/include/mosquitto.h
      - usr/include/mosquitto_broker.h
      - usr/include/mosquitto_plugin.h
      - usr/include/mqtt_protocol.h

plugs:
  provisioning-edge:
    interface: content
    content: ammp-edge-provisioning
    target: $SNAP/provisioning
  wifi-ap-control:
    interface: content
    content: socket-directory
    target: $SNAP_DATA/sockets/wifi-ap
